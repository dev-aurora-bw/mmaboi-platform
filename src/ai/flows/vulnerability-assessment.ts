// Vulnerability assessment AI flow.

'use server';

/**
 * @fileOverview A vulnerability assessment AI agent.
 *
 * - assessVulnerability - A function that handles the vulnerability assessment process.
 * - VulnerabilityAssessmentInput - The input type for the assessVulnerability function.
 * - VulnerabilityAssessmentOutput - The return type for the assessVulnerability function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const VulnerabilityAssessmentInputSchema = z.object({
  submittedInformation: z.string().describe('The information submitted by the user.'),
});
export type VulnerabilityAssessmentInput = z.infer<typeof VulnerabilityAssessmentInputSchema>;

const VulnerabilityAssessmentOutputSchema = z.object({
  vulnerabilityScore: z
    .number()
    .describe(
      'A score between 0 and 100 representing the vulnerability level of the user, with 0 being the least vulnerable and 100 being the most vulnerable.'
    ),
  assessmentExplanation: z
    .string()
    .describe('An explanation of the vulnerability assessment score.'),
});
export type VulnerabilityAssessmentOutput = z.infer<typeof VulnerabilityAssessmentOutputSchema>;

export async function assessVulnerability(
  input: VulnerabilityAssessmentInput
): Promise<VulnerabilityAssessmentOutput> {
  return assessVulnerabilityFlow(input);
}

const prompt = ai.definePrompt({
  name: 'vulnerabilityAssessmentPrompt',
  input: {schema: VulnerabilityAssessmentInputSchema},
  output: {schema: VulnerabilityAssessmentOutputSchema},
  prompt: `You are an AI assistant designed to assess the vulnerability of a user based on the information they submit.

You will receive the submitted information, assess the user's vulnerability, and provide a vulnerability score between 0 and 100, with 0 being the least vulnerable and 100 being the most vulnerable.  You must set the vulnerabilityScore appropriately.

You will also provide an explanation of the vulnerability assessment score.

Submitted Information: {{{submittedInformation}}}`,
});

const assessVulnerabilityFlow = ai.defineFlow(
  {
    name: 'assessVulnerabilityFlow',
    inputSchema: VulnerabilityAssessmentInputSchema,
    outputSchema: VulnerabilityAssessmentOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
